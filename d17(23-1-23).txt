/*
Implement strStr().
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack .
Clarification:
What should we return when needle is an empty string? This is a great question to ask during an interview.
For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to
C's strstr() and Java's indexOf().

Example 1:
Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:
Input: haystack = "aaaaa", needle = "bba"
Output: -1
Example 3:
Input: haystack = "", needle = ""
Output: 0
Constraints:
• 0 <= haystack.length, needle.length <= 5 * 10
• haystack and needle consist of only lower-case English characters.

case=1
input=
hello
ll
output=
2
case=2
input=
aaaaa
bba
output=
-1
case=3
input=
""
""
output=
0

*/
import java.util.*;
class Test{
    public int strStr(String haystack,String needle){
        int h=haystack.toLowerCase().length();
        int n=needle.toLowerCase().length();
        int i=0,j=0;
        if(needle.isEmpty()){
            return 0;
        }
        while(i>0)
        {
            if(haystack.charAt(i)==haystack.charAt(j)){
                i++;
                j++;
                if(j==n)
                {
                    return j;
                }
            }
            else{
                i++;
                j=0;
            }
        }
        return -1;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String haystack=sc.nextLine();
        String needle=sc.nextLine();
        System.out.println(new Test().strStr(haystack,needle));
    }
}
outpu1 working nut testcase 33.33/100



/*
Mr Kamalesh is working with Numbers.
He is given an number N. He wants to check whether N,
obeys following conditions or not:
	- Initialize P=0, extract each digit 'd' from N, add them to P=> P = P + d^2.
	- Add reset N value to P as N=P.
	- and repeat the process until the N equals 1 or 
	if N loops endlessly in a cycle without having 1. 
	
Your task is to check whether N becomes 1 or Not.
If yes, print "true", otherwise print "false".

Note: A^B indicates A to power of B.

Input Format:
-------------
An integer N

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
19

Sample Output-1:
----------------
true

Explanation:
------------
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1


Sample Input-2:
---------------
20

Sample Output-2:
----------------
false


case=1
input=
19
output=
true


case=2
input=
20
output=
false
*/
import java.util.*;
class Test{
    static boolean sum(int n){
        if(n==1){
            return true;
        }
        else if(n==4){
            return false;
        }
        else
            return sum(sqrofdigits(n));
    }
    
    static int sqrofdigits(int n){
        int s=0;
        while(n>0){
            int r=n%10;
            s=s+r*r;
            n=n/10;
        }
        return s;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(sum(n));
    }
}




/*
Implement strStr().
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack .
Clarification:
What should we return when needle is an empty string? This is a great question to ask during an interview.
For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to
C's strstr() and Java's indexOf().

Example 1:
Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:
Input: haystack = "aaaaa", needle = "bba"
Output: -1
Example 3:
Input: haystack = "", needle = ""
Output: 0
Constraints:
• 0 <= haystack.length, needle.length <= 5 * 10
• haystack and needle consist of only lower-case English characters.

case=1
input=
hello
ll
output=
2
case=2
input=
aaaaa
bba
output=
-1
case=3
input=
""
""
output=
0

*/
import java.util.*;
class Test{
    public int strStr(String haystack,String needle){
        int h=haystack.toLowerCase().length();
        int n=needle.toLowerCase().length();
        int i=0,j=0;
        if(needle.isEmpty()){
            return 0;
        }
        while(i<h)
        {
            if(haystack.charAt(i)==needle.charAt(j)){
                i++;
                j++;
                if(j==n)
                {
                    return i-j;
                }
            }
            else{
                i++;
                j=0;
            }
        }
        return -1;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String haystack=sc.next();
        String needle=sc.next();
        System.out.println(new Test().strStr(haystack,needle));
    }
}
//working 100/100




/*
The complement of an integer is the integer you get when you flip all the 0 's to 1 's and all the 1 's to 0 's in
its binary representation.


For example, The integer 5 is "101" in binary and its complement is "010" which is the integer 2 .
Given an integer num , return its complement.

Example 1:
Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement
is 010. So you need to output 2.

Example 2:
Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement
is 0. So you need to output 0.


case=1
input=
5
output=
2


case=2
input=
1
output=
0



*/
import java.util.*;
class Test{
    public static int complement(int n){
        ArrayList<Integer>al=new ArrayList<>();
        while(n!=0){
            al.add(n%2);
            n=n/2;
        }
        for(int i=0;i<al.size();i++){
            if(al.get(i)==0)
            al.set(i,1);
            else
            al.set(i,0);
        }
        int two=1;
        for(int i=al.size()-1;i>=0;i--){
            n=n+al.get(i)*two;
            two=two*2;
        }
        return n;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(complement(n));
    }
}









/*
Due to the heavy rains in TS & AP states, the road from 
Hyderabad to Kakinada destroyed at N places.
Let us assume Vijayawada is at the center bewteen Hyd and Kakinada
NHAI planned to call for fresh bids to repair these pool of destroyed roads.

The destroyed road is indicated as road[x]=[x-from, x-to], where 0 < = x < N 
-500 <= x-from < x-to <= 500. The road from Hyderabad to Vijayawada indicated 
with negative values, and Vijayawada to Kakinada indicated with positive values.

A destroyed road D2 = [r, s] follows a destroyed road D1 = [p, q] if q < r.
A pool of roads at different places can be formed in this way. 

NHAI given a task to you to find the size of maximum pool can be formed.
You do not need to use up all the given roads. You can select the roads in any order.

Note: Size is the number of destroyed roads in the pool.

Input Format:
-------------
Line-1: An integer N, number of roads.
Next N lines: two space separated integers, x-from and x-to values.

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
4
1 4
-10 -3
-5 0
5 6

Sample Output-1:
----------------
3

Explanation:
------------
The pool is : [-10, -3] -> [1, 4] -> [5, 6]
or [-5, 0] -> [1, 4] -> [5, 6]


Sample Input-2:
---------------
4
-50 -20
-15 0
5 20
25 40

Sample Output-2:
----------------
4

Explanation:
------------
The pool is : [-50, -20] -> [-15, 0] -> [5, 20] -> [25, 40]


==== testcases ====
case =1
input =4
1 4
-10 -3
-5 0
5 6
output =3

case =2
input =4
-50 -20
-15 0
5 20
25 40
output =4

case =3
input =10
-500 450
200 250
-350 -150
125 175
150 200
100 150
50 90
-100 -10
275 350
375 475
output =7

case =4
input =10
-500 450
200 275
-350 -150
125 175
150 200
100 150
50 90
-100 -10
275 350
350 475
output =6

case =5
input =15
-500 -450
-400 -200
-350 -250
200 275
-240 -150
125 175
150 200
135 185
-175 -50
-100 0
100 150
50 90
-150 -10
275 350
350 475
output =8

case =6
input =15
-500 450
-450 300
200 275
-300 200
-200 150
125 175
150 200
-150 50
0 50
-100 200
-50 100
-275 350
350 475
-475 500
-400 450
output =4


*/
import java.util.*;
class Test {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
        int cur = Integer.MIN_VALUE, ans = 0;
        for (int[] pair: pairs) if (cur < pair[0]) {
            cur = pair[1];
            ans++;
        }
        return ans;
    }
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
		int[][] grid=new int[n][2];
		for(int i=0;i<n;i++)
		for(int j=0;j<2;j++)
			grid[i][j]=sc.nextInt();
		System.out.println(new Test().findLongestChain(grid));
    }
}