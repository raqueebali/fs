/*
A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:

The area of the rectangular web page you designed must equal to the given target area.
The width W should not be larger than the length L, which means L >= W.
The difference between length L and width W should be as small as possible.
Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.

 

Example 1:

Input: area = 4
Output: [2,2]
Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. 
But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.

Example 2:

Input: area = 37
Output: [37,1]


Example 3:

Input: area = 122122
Output: [427,286]

case=1
input=
4
output=
2
2
case=2
input=
37
output=
37
1
case=3
input=
122122
output=
427
286
case=4
input=
100
output=
10
10
case=5
input=
200
output=
20
10
case=6
input=
201
output=
67
3
*/
import java.util.*;

class Test{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = (int)Math.sqrt(n);
        int idx = Integer.MAX_VALUE;
        int arr[] = new int[2];
        for(int i=1;i<=x;i++){
            int y = n/i;
            if(y*i==n && Math.abs(y-i)<idx){
                idx = Math.abs(i-y);arr[0]=Math.max(i,y);arr[1] = Math.min(i,y);
            }
        }
        System.out.println(arr[0]);
        System.out.println(arr[1]);
    }
}

/*
A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:

The area of the rectangular web page you designed must equal to the given target area.
The width W should not be larger than the length L, which means L >= W.
The difference between length L and width W should be as small as possible.
Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.

 

Example 1:

Input: area = 4
Output: [2,2]
Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. 
But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.

Example 2:

Input: area = 37
Output: [37,1]


Example 3:

Input: area = 122122
Output: [427,286]

case=1
input=
4
output=
2
2
case=2
input=
37
output=
37
1
case=3
input=
122122
output=
427
286
case=4
input=
100
output=
10
10
case=5
input=
200
output=
20
10
case=6
input=
201
output=
67
3
*/
import java.util.*;

class Test{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = (int)Math.sqrt(n);
        int idx = Integer.MAX_VALUE;
        int arr[] = new int[2];
        for(int i=1;i<=x;i++){
            int y = n/i;
            if(y*i==n && Math.abs(y-i)<idx){
                idx = Math.abs(i-y);
                arr[0]=Math.max(i,y);arr[1] = Math.min(i,y);
            }
        }
        System.out.println(arr[0]);
        System.out.println(arr[1]);
    }
}




/*
You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

Givenn, find the total number of full staircase rows that can be formed.

n is a non-negative integer and fits within the range of a 32-bit signed integer.

Example 1:

n = 5

The coins can form the following rows:
¤
¤ ¤
¤ ¤

Because the 3rd row is incomplete, we return 2.

Example 2:

n = 8

The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤

Because the 4th row is incomplete, we return 3.



case=1
input=
5
output=
2
case=2
input=
8
output=
3

*/
import java.util.*;
class Test{
    public static int arrange(int n){
        int l=0,c=1;
        while(n>c){
            n=n-c;
            c++;
            l++;
        }
        return l;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(arrange(n));
    }
}

