/*

At a lemonade stand, each lemonade costs $5 . Customers are standing in a queue to buy from you, and order
one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a
$5 , $10 , or $20 bill. You must provide the correct change to each customer so that the net transaction is that
the customer pays $5 .
Note that you don't have any change in hand at first.
Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can
provide every customer with correct change, or false otherwise.


Example 1:
Input: bills = [5,5,5,10,20]
Output: true

Explanation:
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.

Example 2:
Input: bills = [5,5,10,10,20]
Output: false

Explanation:
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give change of $15 back because we only have two $10 bills.
Since not every customer received correct change, the answer is false.

Example 3:
Input: bills = [5,5,10]
output: true
case=1
input=
5
5 5 5 10 20
output=.
true

case=2
input=
5
5 5 10 10 20
output=
fasle

case=3
input=
3
5 5 10
output=
true

*/
import java.util.*;
class Test{
    public static boolean lemonade(int[]bills){
        int len=bills.length;
        int five=0,ten=0,twenty=0;
        for(int i=0;i<len;i++){
            if(bills[i]==5)
                five++;
            else if(bills[i]==10){
                ten++;
                if(five>0)
                    five--;
                else
                return false;
            }
            else{
                twenty++;
                if(ten>0&&five>0){
                    ten--;
                    five--;
                }
                else if(five>2)
                    five=five-3;
                    
                else
                    return false;
            }
            return true;
            
        }
        return false;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        boolean ans=lemonade(arr);
        System.out.println(ans);
    }
}

testcase:75/100





/*
Alice has n candies, where the ith candy is of type candyType[i] . Alice noticed that she started to gain
weight, so she visited a doctor.
The doctor advised Alice to only eat n / 2 of the candies she has ( n is always even). Alice likes her candies
very much, and she wants to eat the maximum number of different types of candies while still following the
doctor's advice.
Given the integer array candyType of length n , return the maximum number of different types of candies she
can eat if she only eats n / 2 of them.

Example 1:
Input: candyType = [1,1,2,2,3,3]
Output: 3
Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat
one of each type.
Example 2:
Input: candyType = [1,1,2,3]
Output: 2
Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or
[2,3], she still can only eat 2 different types.
Example 3:
Input: candyType = [6,6,6,6]
Output: 1
Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she
only has 1 type.
case=1
input=
6                                                                                                                       
1 1 2 2 3 3      
output=
3  

case=2
input=
4
1 1 2 3
output=
2
case=3
input=
4
6 6 6 6
output=
1




*/
import java.util.*;
class Test{
    public static int candies(int[]candyt,int n){
        int len=candyt.length;
        int count=0;
        Set<Integer>s=new HashSet<>();
        for(int i=0;i<n;i++){
            if(candyt[i]<0){
                candyt[i]=0;
            }
            s.add(candyt[i]);
            if(count<candyt[i]){
                count=Math.min(n/2,s.size());
            }
        }
        return count;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int []arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(candies(arr,n));
    }
}