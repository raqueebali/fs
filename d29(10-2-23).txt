pg1
/*
Krishna manohar and Santosh are working on a military operation at Himachal Pradesh. They are given an operation to defuse the bomb, and they have 
time falling short.
   
Their informer will provide them with a round-shape lock of length ‘L’, 
where L number of integers on the lock and a clue ‘C’.
    
To defuse the bomb they have to restore the original state of the lock, 
by restoring every integer on lock. All the integers must be restored in the same way based on the clue.
  
Its your task to help Krishna manohar, to restore the original code on the lock, 
to defuse the bomb.
 
To restore the lock to its original state, you have to follow these instructions:
 	- If C > 0, restore every i-th number with the sum of the next C integers.
    	- If C < 0, restore every i-th number with the sum of the previous C integers.
   	- If C == 0, restore every i-th number with 0.
   	
As the lock is in round shpae, the next element of lock[n-1] is lock[0], 
and the previous element of lock[0] is lock[n-1].
  
Input Format:
-------------
Line-1: Two space separated integers L, C.
Line-2: L space separated integers, integers on the Lock.
  
Output Format:
--------------
 Print the original state of the lock.
   
 Sample Input-1:
 ---------------
5 2
2 5 9 4 7
  
 Sample Output-1:
 ----------------
 [14, 13, 11, 9, 7]
   
 Sample Input-2:
 ---------------
 5 0
 1 5 6 3 2
  
 Sample Output-2:
 ----------------
 [0, 0, 0, 0, 0]
 
 
 
 case=1
input=
5
2
2 5 9 4 7
output=
14 13 11 9 7
case=2
input=
5
0
1 5 6 3 2
output=
0 0 0 0 0
  
 
*/
// import java.util.*;
// class Test{
//     public int[] defuse(int lock[],int k){
//         int n=lock.length;
//         int []ans=new int[n];
//         List<Integer>l=new ArrayList<>();
//         if(k==0){
//             return ans;
//         }
//         for(int i=0;i<n;i++){
//             if(k>0){
//                 for(int j=i+1;j<i+k+1;j++){
//                     ans[i]+=lock[j%n];
//                 }  
//             }
//             else{
//                 for(int j=i+k;j<i;j++){
//                     ans[i]+=lock[(j+n)%n];
//                 }
//                 l.add(ans[i]);
//             }
//         }
//         return ans;
//     }
//     public static void main(String[]args){
//         Scanner sc=new Scanner(System.in);
//         int n=sc.nextInt();
//         int k=sc.nextInt();
//         int arr[]=new int[n];
//         for(int i=0;i<n;i++){
//             arr[i]=sc.nextInt();
//         }
//         Test t=new Test();
//         System.out.println(t.defuse(arr,k));

//     }
// }
import java.util.*;
public class Test
{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int c=sc.nextInt();
		int a[]=new int[n];
		for(int i=0;i<n;i++)
		    a[i]=sc.nextInt();
		int res[]=new int[n];
		int x=0;
		if(c==0){
		    for(int i=0;i<n;i++){
		        res[x++]=0;
		    }
		}
		else if(c<0){
		    for(int i=1;i<n;i++){
		        res[x++]=a[i-1]+a[i];
		    }
		    res[n-1]=a[n-1]+a[0];
		}
		else{
		    for(int i=1;i<n;i++){
		        if((i+1)!=n){
		            res[x++]=a[i]+a[i+1];
		        }
		    }
		    for(int i=0;i<2;i++){
		        res[n-2]=a[n-1]+a[0];
		        res[n-1]=a[0]+a[1];
		    }
		}
		for(int i=0;i<n;i++)
		System.out.print(res[i]+" ");
		
	}
}


pg3



/*
Rohan has given 2 numbers s and e. He has to find Bitwiseprime numbers starting with s and ending to e.
A number is called BitwisePrime, if the count of 1's in the binary representation of the number is prime.
Help Rohan to find number of Bitwiseprime numbers in the given range.

Input Format:
-------------
Line: 2 space seperated integers s and e.
 
Output Format:
--------------
Print an integer result.
 
Sample Input-1:
---------------
11 15
 
Sample Output-1:
----------------
4
 
Explanation:
------------
11- 1011-(3 bits, 3 is a prime number)
12- 1100-(2 bits, 2 is a prime number)
13- 1101-(3 bits, 3 is a prime number)
14- 1110-(3 bits, 3 is a prime number)
15- 1111-(4 bits, 4 is a not prime number)
 
Sample Input-2:
---------------
5 8

Sample Output-2:
----------------
3
 
Explanation:
------------
5- 101-(2 bits, 2 is a prime number)
6- 110-(2 bits, 2 is a prime number)
7- 111-(3 bits, 3 is a prime number)
8- 1000-(1 bits, 1 is not a prime number)


case =1
input =100 200
output =57
   
case =2
input =1 25
output =18
    
case =3
input =51 150
output =58
*/
import java.util.*;
class Test{
    public boolean isPrime(int n){
        if(n<=1){
            return false;
        }
        for(int i=2;i<=Math.sqrt(n);i++){
            if(n%i==0){
                return false;
            }
        }
        return true;
    }
    public int Ones(int n){
        int count=0;
        while(n>0){
            count+=n&1;
            n>>=1;
        }
        return count;
    }
    public int Count(int a,int b){
        int count=0;
        for(int i=a;i<=b;i++){
            if(isPrime(Ones(i))){
                count++;
            }
        }
        return count;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        System.out.println(new Test().Count(a,b));
    }
}


