/*
Naveen purchased two boxes (Box1,Box2) of unique weights 
of gold coins, where first box weights are subset of second box gold weights.
    
Now design a method for Naveen to find all the next largest weights of Box1 gold coins in the corresponding locations of box2 , 
if doesn’t exist return -1.
   
The Next largest Weight is Weight ‘W’ in Box1 is the first largest weight 
to its right side weight in Box2.
   
NOTE: Unique weights means, no two coins will have same weight.
   
Input Format:
 -------------
 Line-1: Two integers represents size of box1 and size of box2.
Line-2:space separated integers, weihts of gold coins in the first box.
 Line-3: space separated integers, weihts of gold coins in the second box.
   
Output Format:
--------------
Print a list of integers, next largest weights
    
Sample Input-1:
---------------
3 4
4 3 2
1 3 4 2
   
Sample Output-1:
----------------
 [-1, 4, -1]
   
Sample Input-2:
---------------
4 8 
5 6 3 4
1 5 3 7 8 6 4 2
   
Sample Output-2:
----------------
[7, -1, 7, -1]
*/
/*
Naveen purchased two boxes (Box1,Box2) of unique weights 
of gold coins, where first box weights are subset of second box gold weights.
    
Now design a method for Naveen to find all the next largest weights of Box1 gold coins in the corresponding locations of box2 , 
if doesn’t exist return -1.
   
The Next largest Weight is Weight ‘W’ in Box1 is the first largest weight 
to its right side weight in Box2.
   
NOTE: Unique weights means, no two coins will have same weight.
   
Input Format:
 -------------
 Line-1: space separated integers, weihts of gold coins in the first box.
 Line-2: space separated integers, weihts of gold coins in the second box.
   
Output Format:
--------------
Print a list of integers, next largest weights
    
Sample Input-1:
---------------
4 3 2
1 3 4 2
   
Sample Output-1:
----------------
 [-1, 4, -1]
   
Sample Input-2:
---------------
 5 6 3 4
 1 5 3 7 8 6 4 2
   
Sample Output-2:
----------------
[7, -1, 7, -1]






case=1
input=
3
4
4 1 2 
1 3 4 2
output=
-1 3 -1

case=2
input=
2
4
2 4
1 2 3 4
output=
3 -1

*/
// import java.util.*;
// class Test{
//     public int Greater(int n){
//         int nge[]=new int[n];
//         Stack<Integer>st=new Stack<>();
//         for(int i=0;i<n-1;i++){
//             while(!st.isEmpty()&&st.peek()<=i/n){
//                 st.pop();
//             }
//             if(i<n){
//                 if(st.isEmpty()==false)
//                     nge[i]=st.peek();
//                 else
//                     nge[i]=-1;
//             }
//             st.push(i%n);
//         }
//     return n;
//     }
//     public static void main(String[]args){
//         Scanner sc=new Scanner(System.in);
//         int n=sc.nextInt();
//         int n1=sc.nextInt();
//         int arr[]=new int[n];
//         int arr1[]=new int[n1];
//         for(int i=0;i<n;i++){
//             arr[i]=sc.nextInt();
//         }
//         for(int i=0;i<n1;i++){
//             arr1[i]=sc.nextInt();
//         }
//         System.out.println(new Test().Greater(n));
        
        
//     }
// }

import java.util.*;
class Test{
    public int []greater(int num1[],int num2[]){
        int res[]=new int[num1.length];
        List<Integer>l=new ArrayList<>();
        for(int i=0;i<num1.length;i++){
            boolean found=false;
            int j;
            for(j=0;j<num2.length;j++){
                if(found&&num2[j]>num1[i]){
                    res[i]=num2[j];
                    break;
                }
                if(num2[j]==num1[i]){
                    found=true;
                    l.add(num2[j]);
                }
            }
            if(j==num2.length){
                res[i]=-1;
            }
        }

        return res;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        int n2=sc.nextInt();
        int []ar1=new int[n1];
        int []ar2=new int[n2];
        for(int i=0;i<n1;i++){
            ar1[i]=sc.nextInt();
        }
        for(int i=0;i<n2;i++){
            ar2[i]=sc.nextInt();
        }
        System.out.println(new Test().greater(ar1,ar2));
    }
}