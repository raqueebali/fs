/*
Given two sorted arrays and a number x, find the pair whose sum is closest to x and the pair has an element
from each array. 
We are given two arrays ar1[0…m-1] and ar2[0..n-1] and a number x, we need to find the pair ar1[i] + ar2[j] such that absolute value of (ar1[i] + ar2[j] – x) is minimum. 

Example-1:
Input: ar1[] = {1, 4, 5, 7};
ar2[] = {10, 20, 30, 40};
x = 32
Output: 1 and 30

Example-2:
Input: ar1[] = {1, 4, 5, 7};
ar2[] = {10, 20, 30, 40};
x = 50
Output: 7 and 40

Solution: A Simple Solution is to run two loops. The outer loop considers every element of first array 
and inner loop checks for the pair in second array. 
We keep track of minimum difference between ar1[i] + ar2[j] and x. We can do it in O(n) time using following 
steps.
1. Merge given two arrays into an auxiliary array of size m+n using merge process of merge sort.
While merging keep another boolean array of size m+n to indicate whether the current element in merged
array is from ar1[] or ar2[]. 
2. Consider the merged array and use the linear time algorithm to find the pair with sum closest to x. 
One extra thing we need to consider only those pairs which have one element from ar1[] and 
other from ar2[], we use the boolean array for this purpose.



Algorithm:
1) Initialize a variable diff as infinite (Diff is used to store the difference between pair and x). We need to find the minimum diff.
2) Initialize two index variables l and r in the given sorted array.
(a) Initialize first to the leftmost index in ar1: l = 0
(b) Initialize second the rightmost index in ar2: r = n-1
3) Loop while l< length.ar1 and r>=0
(a) If abs(ar1[l] + ar2[r] - sum) < diff then
update diff and result
(b) If (ar1[l] + ar2[r] < sum ) then l++
(c) Else r--
4) Print the result.



input=
enter size of array_1
4
enter the values of array_1
1 4 5 7
enter size of array_2
4
enter the values of array_2
10 20 30 40
enter closest number
32
output=
The closest pair is [1, 30]

*/
import java.util.*;
class Test{
    public static void closest(int arr1[],int arr2[],int m,int n,int k){
        int len1=arr1.length;
        int len2=arr2.length;
        int diff=Integer.MAX_VALUE;
        int res_l=0,res_r=0;
        int l=0,r=n-1;
        while(l<m&&r>=0){
            if(Math.abs(arr1[l]+arr2[r]-k)<diff){
                res_l=l;
                res_r=r;
                diff=Math.abs(arr1[l]+arr2[r]-k);  
            }
            if(arr1[l]+arr2[r]>k){
                r--;
            }
            else{
                l++;
            }
            
            
        }
        //Map<Integer,Integer>mp=new HashMap<>();
        System.out.println("The closest pair is "+"["+arr1[res_l]+","+arr2[res_r]+"]");
        
        
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter size of array_1");
        int m=sc.nextInt();
        int arr1[]=new int[m];
        System.out.println("enter the values of array_1");
        for(int i=0;i<m;i++){
            arr1[i]=sc.nextInt();
        }
        System.out.println("enter size of array_2");
        int n=sc.nextInt();
        int arr2[]=new int[n];
        System.out.println("enter the values of array_2");
        for(int i=0;i<n;i++){
            arr2[i]=sc.nextInt();
        }
        System.out.println("enter closest number");
        int k=sc.nextInt();
        Test t=new Test();
        t.closest(arr1,arr2,m,n,k);
    }
}




/*
Given a non-empty string s and an abbreviation abbr, return whether the string matches with 
the given abbreviation.
A string such as "word" contains only the following valid abbreviations:
["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"] 

Notice that only the above abbreviations are valid abbreviations of the string "word".

Any other string is not a valid abbreviation of "word".
Note: Assume s contains only lowercase letters and abbr contains only lowercase letters and digits.
Example 1:
Given s = "internationalization",
abbr = "i12iz4n": 
Return true.
Example 2: 
Given s = "apple", 
abbr = "a2e": 
Return false.
Time Complexity: O(n) where n=max(len(word),len(abbr)) Auxiliary Space: O(1).

Solution: 
We maintain two pointers, i pointing at word and j pointing at abbr. 
 There are only two scenarios: 
 j points to a letter. We compare the value i and j points to. If equal, we increment them. Otherwise, return False. 
 j points to a digit. We need to find out the complete number that j is pointing to, 
e.g. 123. Then we would increment i by 123. 
We know that next we will: 
 either break out of the while loop if i or j is too large 
 or we will return to scenario 1.



case1:
input=
Enter word
kmit
Enter Abbreviation
4
output=
true

case=2

input=
Enter word
apple
Enter Abbreviation
a2e
output=
false



*/
import java.util.*;
class Test{
    public boolean ValidAbbr(String word,String abbr){
        int i=0,j=0;
        while(i<word.length() &&j<abbr.length()){
            if(word.charAt(i)== abbr.charAt(j)){
                i++;
                j++;
                continue;
            }
            if(abbr.charAt(j)<='0' || abbr.charAt(j)>'9'){
                return false;
            }
        
        int start=j;
        while(j<abbr.length() && abbr.charAt(j)>='0'&& abbr.charAt(j)<'9'){
            j++;
        }
        int num=Integer.valueOf(abbr.substring(start,j));
        i+=num;
    }
    return i==word.length() && j==abbr.length();
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter Word");
        String word=sc.next();
        System.out.println("Enter Abbreviation");
        String abbr=sc.next();
        System.out.println(new Test().ValidAbbr(word,abbr));
    }
}



/*
Given the head of a singly linked list, return true if it is a palindrome or 
false otherwise.

Example 1:
Input:
head = [1,2,2,1]
Output:
true
Example 2:
Input:
head= [1,2]
Output:
false

Approach:
Use two pointers left and right. 
Move right and left using recursion and check for following in each recursive call. 
1) Sub-list is a palindrome. 
2) Value at current left and right are matching. 
If both above conditions are true then return true. 
 The idea is to use function call stack as a container. Recursively traverse till 
the end of the list. When we return from the last NULL, we will be at the last node.
The last node is to be compared with the first node of the list. 

 In order to access the first node of the list, we need the list head to be available 
in the last call of recursion. Hence, we pass head also to the recursive function. 
If they both match we need to compare (2, n-2) nodes. 

 Again when recursion falls back to (n-2)nd node, we need a reference to 2nd node 
from the head. We advance the head pointer in the previous call, to refer to the next 
node in the list. However, the trick is identifying a double-pointer.

Passing a single pointer is as good as pass-by-value, and we will pass the 
same pointer again and again. 

 We need to pass the address of the head pointer for reflecting the changes 
in parent recursive calls.

Time Complexity: O(n) 
Auxiliary Space: O(n) if Function Call Stack size is considered, otherwise O(1).



Output: 

a->NULL
Not Palindrome

b->a->NULL
Not Palindrome

a->b->a->NULL
Is Palindrome

c->a->b->a->NULL
Not Palindrome

a->c->a->b->a->NULL
Not Palindrome

b->a->c->a->b->a->NULL
Not Palindrome

a->b->a->c->a->b->a->NULL
Is Palindrome


*/
import java.util.*;

    public class Test{
        Node head;
        Node left;
        public class Node{
            public char data;
            public Node next;
            public Node(char d){
                data=d;
                next=null;
            }
        }
        boolean isPalindromeUtil(Node right){
            left=head;
            if(right==null)
                return true;
            boolean isp=isPalindromeUtil(right.next);
            if(isp==false)
                return false;
            boolean isp1=(right.data==left.data);
            left=left.next;
            return isp1;
        }
        boolean isPalindrome(Node head){
            boolean result=isPalindromeUtil(head);
            return result;
        }
        public void push(char new_data){
            Node new_node=new Node(new_data);
            new_node.next=head;
            head=new_node;
        }
        void printList(Node ptr){
            while(ptr!=null){
                System.out.print(ptr.data+"->");
                ptr=ptr.next;
            }
            System.out.println("Null");
        }
        public static void main(String[]args){
            Test list=new Test();
            char[]str={'a','b','a','c','a','b','a'};
            for(int i=0;i<7;i++){
                list.push(str[i]);
                list.printList(list.head);
                if(list.isPalindrome(list.head)){
                    System.out.println("Is Palindrome");
                    System.out.println("");
                }
                else{
                    System.out.println("Not Palindrome");
                    System.out.println("");
                }
            }
        }
    }

