/*You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

 

Example 1:

Input: s = "abbaca"
Output: "ca"

Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".

Example 2:

Input: s = "azxxzy"
Output: "ay"
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.

case=1
input=
abbaca
output=
ca


case=2
input=
azxxzy
output=
ay


*/
// import java.util.*;
// class Test{
//     public String removeDuplicates(String s){
//         Stack<Character>st=new Stack<>();
//         StringBuilder sb=new StringBuilder();
//         for(int i=0;i<s.length();i++){
//             if(!st.isEmpty()&&st.peek()==s.charAt(i)){
//                 st.pop();
//             }
//             else{
//                 st.add(s.charAt(i));
//             }
//         }
//         while(!st.isEmpty()){
//             sb.append(st.pop());
//         }
//         return sb.reverse().toString();
//     }
//     public static void main(String[]args){
//         Scanner sc=new Scanner(System.in);
//         String s=sc.next();
//         char[]ch=new char[s.length()];
//         int len=s.length();
//         System.out.println(new Test().removeDuplicates(s));
//     }
// }

import java.util.*;
class Test{
    public String remD(String str){
        StringBuilder sb=new StringBuilder(str);
        int i=0;
        while(i<sb.length()-1){
            if(sb.charAt(i)==sb.charAt(i+1)){
                sb.delete(i,i+2);
                if(i>0){
                    i--;
                }
            }
            else{
                i++;
            }
        }
        return sb.toString();
    }
    
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String str=sc.next();
        System.out.println(new Test().remD(str));
    }
}





/*Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.

You may return any answer array that satisfies this condition.

Example:

Input: [3,1,2,4]
Output: [2,4,3,1]
The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Note:

1 <= A.length <= 5000
0 <= A[i] <= 5000.

Solution:

Two List Implementation: Here, we can have two lists, one to store the odd numbers and the other to store 
the even numbers. By iterating the original array of numbers, we push each number to its corresponding list.

At last, we just need to append all the elements of the even list to the output array followed by elements of the odd list.


input=
4
3 1 4 2
output=
2 4 3 1
*/
import java.util.*;
class Test{
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int []arr=new int[n];
        int len=arr.length;
        List<Integer>list1=new ArrayList<>();
        List<Integer>list2=new ArrayList<>();
        
        for(int i=0;i<len;i++){
            arr[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++){
            if(arr[i]%2==0){
                int x=arr[i];
                list1.add(x);
            }
            if(arr[i]%2!=0){
                int y=arr[i];
                list2.add(y);
            }
        }
            list1.addAll(list2);
        for(Integer num:list1){
            System.out.print(num+" ");
        }
    }
}






/*
Given an array nums of integers, you can perform operations on the array.

In each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.

You start with 0 points. Return the maximum number of points you can earn by applying such operations.

Example 1:

Input: nums = [3, 4, 2]
Output: 6
Explanation: 
Delete 4 to earn 4 points, consequently 3 is also deleted.
Then, delete 2 to earn 2 points. 6 total points are earned.

Example 2:

Input: nums = [2, 2, 3, 3, 3, 4]
Output: 9
Explanation: 
Delete 3 to earn 3 points, deleting both 2's and the 4.
Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.
9 total points are earned.

Note:

The length of nums is at most 20000.
Each element nums[i] is an integer in the range [1, 10000].


case=1
input=
3
3 4 2
output=
6

case=2
input=
6
2 2 3 3 3 4
output=
9
*/
import java.util.*;
class Test{
    public int earn(int nums[]){
        int len=nums.length;
        int n=10001;
        int[]v=new int[n];
        for(int num:nums){
            v[num]+=num;
        }
        int take=0,skip=0;
        for(int i=0;i<n;i++){
            int t1=skip+v[i];
            int s1=Math.max(skip,take);
            take=t1;
            skip=s1;
        }
        return Math.max(take,skip);
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[]a=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        System.out.println(new Test().earn(a));
    }
}






