/*
Mr Shravan is given a word W, and W cosists of lowercase alphabets and '#'. 
Mr Shravan is allowed to replace the '#' with any one lowercase alphabet, 
such that the word W is a palindrome and it has to be the lexicographically
smallest among all the possible options.

Your task is to help Mr Sharavan to return the lexicographically smallest 
palindrome string among all the possible options. 
OR "invlaid" if it is not possible.

Input Format:
-------------
A String W, consists of lowercase letters and #.

Output Format:
--------------
A String result.


Sample Input-1:
---------------
r#d#v##er

Sample Output-1:
----------------
redavader


Sample Input-2:
---------------
r#d#v#cer

Sample Output-2:
----------------
invalid



case =1
input =r#d#v##er
output =redavader

case =2
input =r#d#v#cer
output =invalid

case =3
input =nol#mo#no#el#n
output =nolemonnomelon

case =4
input =r##r#msir#sm###er
output =rearamsirismaraer


*/
import java.util.*;
class Test{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        String res=fun(s);
        System.out.println(res);
    }
    static String fun(String s){
        String some="invalid";
        char ni[]=new char[s.length()];
        int i=0;
        int j=s.length()-1;
        int x=0;
        int y=s.length()-1;
        while(i<=j){
            char ch=s.charAt(i);
            char hc=s.charAt(j);
            if(ch!='#' && hc!='#' && ch!=hc){
                return some;
            }
            else if(ch!='#' && hc!='#' && ch==hc){
                ni[x++]=ch;
                ni[y--]=hc;
                i++;
                j--;
            }
            else if(ch=='#' && hc=='#'){
                ni[x++]='a';
                ni[y--]='a';
                i++;
                j--;
            }
            else if(ch=='#' && hc!='#'){
                ni[x++]=hc;
                ni[y--]=hc;
                i++;
                j--;
            }
            else if(ch!='#' && hc=='#'){
                ni[x++]=ch;
                ni[y--]=ch;
                i++;
                j--;
            }
            else if(s.length()%2!=0 && i==j && ch=='#' && hc=='#'){
                ni[i]='a';
            }
        }
        //return ni;
        StringBuilder sb=new StringBuilder();
        for(int k=0;k<ni.length;k++){
            sb.append(ni[k]);
        }  
        sb.reverse();
        return sb.toString();
    }
}
