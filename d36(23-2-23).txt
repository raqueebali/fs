/*  CP_UNIT_II _PROGRAM-3: Remove All Ones With Row and Column Flips

You are given an m x n binary matrix grid.

In one operation, you can choose any row or column and flip each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).

Return true if it is possible to remove all 1's from grid using any number of operations or false otherwise.

Example 1:
Input: grid = [ [0,1,0],  [1,0,1],  [0,1,0]]
Output: true
Explanation: One possible way to remove all 1's from grid is to:
- Flip the middle row
- Flip the middle column

Example 2:
Input: grid = [[1,1,0],[0,0,0],[0,0,0]]
Output: false
Explanation: It is impossible to remove all 1's from grid.


Example 3:
Input: grid = [[0]]
Output: true
Explanation: There are no 1's in grid.


Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is either 0 or 1.


case =1
input =3 3
1 0 1
0 1 0
1 0 1
output =true

case =2
input =4 5
0 1 0 0 0
1 0 0 1 0
1 0 1 1 1
1 0 0 0 1
output =false


*/
import java.util.*;
class Test{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        int a[][]=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                a[i][j]=sc.nextInt();
            }
        }
        System.out.println(fun(a,n,m));
    }
    static boolean fun(int a[][],int n,int m){
        int first[]=a[0];
        for(int i=1;i<n;i++){
            if(a[i][0]==first[0]){
                for(int j=0;j<m;j++){
                    if(first[j]!=a[i][j]){
                        return false;
                    }
                }
            }
            else{
                for(int j=0;j<m;j++){
                    if(first[j]==a[i][j]){
                        return false;
                    }
                }
            }
        }
        return true;
    }
    
}




prog 2

/*
Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

Approach:
We can use hashmaps to save the replacement for every character in the first string. 
If we reach a position where there is a replacement for the first character,

We can check if the replacement is the same as the character in the other string. 
If not, the strings can’t be isomorphic.
In case there is no replacement for the first character, 
we can check if the second character has been used as the replacement for any other character 
in the first string. This check is important because we need to map every character in the first 
string to a unique character. If there exists no character whose replacement is the second character, 
we can assign the second character as the replacement of the first character. Otherwise, 
the strings are not isomorphic.



case=1
input=
egg
add
output=
true

case=2
input=
foo
bar
output=
false


case=3
input=
paper
title
output=
true




*/

import java.util.*;
class Test{
    public boolean isom(String s,String t){
        int l=s.length();
        int m=s.length();
        Map<Character,Character>hs=new HashMap<>();
        if(s==null||t==null||l!=m){
            return false;
        }
        for(int i=0;i<l;i++){
            char s1=s.charAt(i);
            char t1=t.charAt(i);
            if(hs.containsKey(s1)){
                if(hs.get(s1)!=t1)
                    return false;
                }
                else{
                    if(hs.containsValue(t1))
                        return false;
                    hs.put(s1,t1);
                }
            
        }
        return true;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        String t=sc.next();
        System.out.println(new Test().isom(s,t));
    }
}


prog 4

/*
A wonderful string is a string where at most one letter appears an odd number of times.

For example, "ccjjc" and "abab" are wonderful, but "ab" is not.
Given a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. If the same substring appears multiple times in word, then count each occurrence separately.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: word = "aba"
Output: 4
Explanation: The four wonderful substrings are underlined below:
- "aba" -> "a"
- "aba" -> "b"
- "aba" -> "a"
- "aba" -> "aba"
Example 2:

Input: word = "aabb"
Output: 9
Explanation: The nine wonderful substrings are underlined below:
- "aabb" -> "a"
- "aabb" -> "aa"
- "aabb" -> "aab"
- "aabb" -> "aabb"
- "aabb" -> "a"
- "aabb" -> "abb"
- "aabb" -> "b"
- "aabb" -> "bb"
- "aabb" -> "b"
Example 3:

Input: word = "he"
Output: 2
Explanation: The two wonderful substrings are underlined below:
- "he" -> "h"
- "he" -> "e"
 

Constraints:

1 <= word.length <= 105
word consists of lowercase English letters from 'a' to 'j'.



APPROACH:

1.We can represent the odd/evenness of a string with a bitmask
First we count the number of occurrences of each character in the string. Then if we convert the count to binary 0 = even, 1 = odd since all we care about is even or odd not the actual count.

2.In terms of bitmask calculations, appending a character to a string is equivalent to doing an XOR operation of the bitmask of the character and the bitmask of string. Quick review of XOR: it returns 1 if the bits are different, 0 if they are the same. Adding a character to a string flips the even/odd bit for that character in the bitmask.

3.If the prefix of a string has the same bitmask as the string, then the remaining substring’s bitmask has all its bits 0 and is a wonderful string.
With the knowledge under our belt, we can now go through each character of the string compute the bitmask using 2) and test if a matching prefix using 3) and add to result. This handles all the cases where occurrence of all characters are even.

We also want to add the case where one character appears odd number of times. We can do this by flipping the bit for each character in the current string and if the resulting bitmask exist as a prefix then add the count to the result.



case=1
input=
aba
output=
4

case=2
input=
aabb
output=
9

case=3
input=
he
output=
2



*/
import java.util.*;
class Test{
    public boolean wonderful(String s){
        int len=s.length();
        HashSet<Character>hs=new HashSet<>();
        for(char c:s.toCharArray()){
            if(hs.add(c)){
                hs.add(c);
            }
            else{
                hs.remove(c);
            }
        }
        return hs.size()<=1;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        int c=0;
        ArrayList<String>al=new ArrayList<>();
        for(int i=0;i<=s.length();i++){
            for(int j=i+1;j<=s.length();j++){
                al.add(s.substring(i,j));
            }
        }
        for(String k:al){
            if(new Test().wonderful(k)==true){
                c++;
            }
        }
        System.out.println(c);
       // System.out.println(new Test().wonderful(s));
        
    }
}


prog 3

/*

An additive number is a string whose digits can form an additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits, return true if it is an additive number or false otherwise.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

 

Example 1:

Input: "112358"
Output: true
Explanation: 
The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

Example 2:

Input: "199100199"
Output: true
Explanation: 
The additive sequence is: 1, 99, 100, 199. 
1 + 99 = 100, 99 + 100 = 199
 

Constraints:

1 <= num.length <= 35
num consists only of digits.



case=1
input=
112358
output=
true
case=2
input=
199100199
output=
true

*/
import java.util.*;
class Test{
    public boolean isAdditiveNumber(String num) {
        int n = num.length();
        for (int i = 1; i < Math.min(n - 1, 19); ++i) {
            for (int j = i + 1; j < Math.min(n, i + 19); ++j) {
                if (i > 1 && num.charAt(0) == '0') {
                    break;
                }
                if (j - i > 1 && num.charAt(i) == '0') {
                    continue;
                }
                long a = Long.parseLong(num.substring(0, i));
                long b = Long.parseLong(num.substring(i, j));
                if (dfs(a, b, num.substring(j))) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(long a, long b, String num) {
        if ("".equals(num)) {
            return true;
        }
        if (a + b > 0 && num.charAt(0) == '0') {
            return false;
        }
        for (int i = 1; i < Math.min(num.length() + 1, 19); ++i) {
            if (a + b == Long.parseLong(num.substring(0, i))) {
                if (dfs(b, a + b, num.substring(i))) {
                    return true;
                }
            }
        }
        return false;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String num=sc.next();
        System.out.println(new Test().isAdditiveNumber(num));
    }
}
