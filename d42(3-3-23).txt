prog 4

/*

You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a' or 'b'.


case=1
input=
ababa
output=
1

case=2
input=
abb
output=
2

case=3
input=
baabb
output=
2
*/
import java.util.*;
class Test{
    public int Palindrome(String s){
        if(s==null||s.length()==0){
            return 0;
        }
        int i=0;
        int j=s.length()-1;
        while(i<j){
            if(s.charAt(i)==s.charAt(j)){
                i++;
                j--;
            }
            else{
                return 2;
            }
        }
        return 1;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        System.out.println(new Test().Palindrome(s));
    }
}



prog 3


/*

Given two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. If there is no common integer amongst nums1 and nums2, return -1.

Note that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer.

 

Example 1:
Input: nums1 = [1,2,3], nums2 = [2,4]
Output: 2
Explanation: The smallest element common to both arrays is 2, so we return 2.

Example 2:
Input: nums1 = [1,2,3,6], nums2 = [2,3,4,5]
Output: 2
Explanation: There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.
 
csse=1
input=
3
2
1 2 3 
2 4
output=
2
csse=2
input=
4
4
1 2 3 6
2 3 4 5
output=
2


*/
import java.util.*;
class Test{
    public int element(int nums1[],int nums2[]){
        int a=nums1.length;
        int b=nums2.length;
        int count=0;
        TreeSet<Integer> ts=new TreeSet<Integer>();
        TreeSet<Integer>ts1=new TreeSet<Integer>();
        
        for(int num:nums1){
            ts.add(num);
        }
        for(int num:nums2){
            ts1.add(num);
        }
        for(Integer num:ts){
            if(ts1.contains(num)){
                return num;
            }
        }
        return -1;
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        int nums1[]=new int[n];
        int nums2[]=new int[m];
        for(int i=0;i<n;i++){
            nums1[i]=sc.nextInt();
        }
        for(int i=0;i<m;i++){
            nums2[i]=sc.nextInt();
        }
        System.out.println(new Test().element(nums1,nums2));
    }
}


prog 2


/*

You are given a positive integer n, that is initially placed on a board. Every day, for 109 days, you perform the following procedure:

For each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1.
Then, place those numbers on the board.
Return the number of distinct integers present on the board after 109 days have elapsed.

Note:

Once a number is placed on the board, it will remain on it until the end.
% stands for the modulo operation. For example, 14 % 3 is 2.
 

Example 1:
Input: n = 5
Output: 4

Explanation: Initially, 5 is present on the board. 
The next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. 
After that day, 3 will be added to the board because 4 % 3 == 1. 
At the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5. 

Example 2:
Input: n = 3
Output: 2

Explanation: 
Since 3 % 2 == 1, 2 will be added to the board. 
After a billion days, the only two distinct numbers on the board are 2 and 3. 




*/
/*bad idea working testcase(100/100)*/
// import java.util.*;
// class Test{
//     public int billions(int n){
//         int x=0;
//         for(int i=1;i<109;i++){
//             if(x%i==1){
//                 x+=Math.abs(n);
//                 i++;
//                 return x;
//             }
            
//         }
//         return Math.abs(n-1);
//     }
//     public static void main(String[]args){
//         Scanner sc=new Scanner(System.in);
//         int n=sc.nextInt();
//         System.out.println(new Test().billions(n));
//     }
// }

import java.util.*;
class Test{
    public int billions(int n){
        Set<Integer>set=new HashSet<>();
        set.add(n);
        while(n>0){
            for(int i=1;i<=n;i++){
                if(n%i==1){
                    set.add(i);
                }
            }
            n--;
        }
        return set.size();
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(new Test().billions(n));
    }
}