prog 1
/*Index Pairs of a String

there is an input string STR(without any space) and an array of 
strings words[]. Print all the pairs of indices [s, e] where s, e are starting 
index and ending index of every string in words[] in the input string STR.

Note: Print the pairs[s, e] in sorted order.
(i.e., sort them by their first coordinate, and in case of ties sort them by 
their second coordinate).

Input Format
------------
Line-1: string STR(without any space)
Line-2: space separated strings, words[]

Output Format
-------------
Print the pairs[s, e] in sorted order.


Sample Input-1:
---------------
thekmecandngitcolleges
colleges kmec ngit

Sample Output-1:
----------------
3 6
10 13
14 21


Sample Input-2:
---------------
xyxyx
xyx xy

Sample Output-2:
----------------
0 1
0 2
2 3
2 4

Explanation: 
------------
Notice that matches can overlap, see "xyx" is found at [0,2] and [2,4].


Sample Input-3:
---------------
kmecngitkmitarecsecolleges
kmit ngit kmec cse

Sample Output-3:
----------------
0 3
4 7
8 11
15 17


=== testcases ===
case=1
input=thestoryofleetcodeandme
story fleet leetcode
output=3 7
9 13
10 17

case=2
input=kmitngitkmitngitcbitvbit
kmit ngit it
output=0 3
2 3
4 7
6 7
8 11
10 11
12 15
14 15
18 19
22 23

case=3
input=kmecngitkmitarecsecolleges
kmit ngit kmec colleges
output=0 3
4 7
8 11
18 25

case=4
input=abcabcabc
abc abca ab
output=0 1
0 2
0 3
3 4
3 5
3 6
6 7
6 8

case=5
input=kmecngitkmitarecsecolleges
kmit ngit kmec cse
output=0 3
4 7
8 11
15 17

case=6
input=aaacbaaccacbcbaaaacbaaccacbaabaababcccbcacaccabcacccbabaabacbaccaaacacaccba
abc cc acbc cab
output=7 8
9 12
22 23
33 35
35 36
36 37
43 44
44 46
45 47
49 50
50 51
62 63
71 72

*/
import java.util.*;

class TrieNode
{
    TrieNode[] arr;
    boolean isEnd;   /*indicate whether there is a word*/
    public TrieNode()
	{
        isEnd=false;
        arr=new TrieNode[26];
	}
}
class Test
{
    public int[][] indexPairs(String text, String[] words) 
	{
        /*initializing tire and put all word from words into Trie.*/
        TrieNode root=new TrieNode();
        //create a tr 0ie
        for(String word:words)
        {
            TrieNode node=root;
        	for(int i=0;i<word.length();i++)
		    {
		        char c=word.charAt(i);
		        if(node.arr[c-'a']==null)
		        {
		            TrieNode cur=new TrieNode();
		            node.arr[c-'a']=cur;
		        }
		        node=node.arr[c-'a'];
		    }
		    node.isEnd=true;
        }
        /*if text is "ababa", check "ababa","baba","aba","ba","a" individually.*/
        int len=text.length();
        List<int[]> list=new ArrayList<>();
        for(int i=0;i<len;i++)
		{
            TrieNode cur=root;
            char cc=text.charAt(i);
            int j=i;   /*j is our moving index*/
            while(cur.arr[cc-'a']!=null){
                cur=cur.arr[cc-'a'];
                if(cur.isEnd){
                   int a[]={i,j};
                   list.add(a);
                }
                j++;
                if(j==len)
                break;
                else 
                cc=text.charAt(j);
            }
            //logic
		}
        /*put all the pairs from list into array*/
        int size=list.size();
        int[][] res=new int[size][2];
        int i=0;
        //logic
        for(int a[]:list)
        {
            res[i][0]=a[0];
            res[i][1]=a[1];
            i++;
        }
        return res;
	}
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String text=sc.nextLine();
		String dict[]=sc.nextLine().split(" ");
		int res[][]=new Test().indexPairs(text,dict);
		for(int[] ans: res)
		{
			System.out.println(ans[0]+" "+ans[1]);
		}
	}
}