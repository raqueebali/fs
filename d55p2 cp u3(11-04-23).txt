prog 2
cp u3


/*Longest Word With All Prefixes Level using Trie DS.


Given an array of strings words, find the longest string in words such that every prefix of it is also in words.

For example, let words = ["a", "app", "ap"]. The string "app" has prefixes "ap" and "a", all of which are in words.
Return the string described above. If there is more than one string with the same length, return the lexicographically smallest one, and if no string exists, return "".


Example 1:

Input: words = [“k”,”ki”,”kir”,”kira”, “kiran”]

Output: “kiran”

Explanation: “kiran” has prefixes “kira”, “kir”, “ki”, and “k”, and all of them appear in words.

Example 2:

Input: words = [“a”, “banana”, “app”, “appl”, “ap”, “apply”, “apple”]

Output: “apple”

Explanation: Both “apple” and “apply” have all their prefixes in words. However, “apple” is lexicographically smaller, so we return that.

Example 3:

Input: words = [“abc”, “bc”, “ab”, “qwe”]

Output: “”

Constraints:

1 <= words.length <= 10^5
1 <= words[i].length <= 10^5
1 <= sum(words[i].length) <= 10^5


Solution:
Use a trie to store all the words. Then do depth first search on the trie.
Search the nodes from left to right to make sure that the leftmost nodes (with lexicographically smallest letters)
 are visited first. For the words that all nodes are ends of words, update the longest word. Finally, 
return the longest word.

=== testcases ===
case =1
input =k kmi km kmit kme kmec ksj ksjc ks kmecs
output ="kmecs"

case =2
input =t tanker tup tupl tu tuple tupla
output ="tupla"

case =3
input =abc bc ab abcd
output =""



*/
import java.util.*;

class TrieNode 
{
    TrieNode arr[] = new TrieNode[26];
    boolean isEnd;
}

class Test 
{
    TrieNode root = new TrieNode();
    String res = "";
    public String longestWord(String[] words)
	{
        for (String word : words) addWord(word);
        for (String word : words) searchPrefix(word);
        return res;
	}
    
    private void searchPrefix(String word) 
	{
        //logic
         TrieNode node=root;
        for(int i=0;i<word.length();i++)
        {
            char c=word.charAt(i);
            node=node.arr[c-'a'];
            if(node.isEnd==false){
            return ;
            }
        }
        if((res.length()<word.length())||(res.length()==word.length()&&res.compareTo(word)>0))
        {
            res=word;
        }
        
	}
    
    private void addWord(String word) 
	{
		//logic
		TrieNode node=root;
		for(int i=0;i<word.length();i++)
		{
		    char c=word.charAt(i);
		    if(node.arr[c-'a']==null)
		    {
		        TrieNode cur=new TrieNode();
		        node.arr[c-'a']=cur;
		    }
		
		    node=node.arr[c-'a'];
		}
		node.isEnd=true;
	}
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String dict[]=sc.nextLine().split(" ");
		System.out.println(new Test().longestWord(dict));
	}
}
