/*
You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:

The number of prime factors of n (not necessarily distinct) is at most primeFactors.
The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.
Return the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7.

Note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.

 

Example 1:
Input: primeFactors = 5
Output: 6
Explanation: 200 is a valid value of n.
It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].
There is not other value of n that has at most 5 prime factors and more nice divisors.

Example 2:
Input: primeFactors = 8
Output: 18

case=1
input=
5
output=6

case=2
input=
8
output=
18




*/
import java.util.*;
class Test{
    long mod=10000007;
    
    public int maxDiv(int n){
        long prime=0;
        if(n==1){
            return 1;
        }
        if(n%3 == 0){
            prime=power(3,n/3);
        }
        if(n%3 == 1){
            prime=(4*power(3,n/3-1))%mod;
        }
        if(n%3 == 2){
            prime=(2*power(3,n/3))%mod;
        }
        return(int)prime;
    }
    
    long power(int a,int b){
        if(b==0){
            return 1;
        }
        long prime=power(a,b/2);
        
        if(b%2!=0){
            return(prime*prime*a)%mod;
        }
        return (prime*prime)%mod;
    }
    
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(new Test().maxDiv(n));
    }
}

