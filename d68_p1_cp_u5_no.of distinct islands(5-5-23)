/* Number of Distinct Islands using Union and Find Algoritm


Given a non-empty 2D arraygridof 0's and 1's, an island is a group of1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Count the number of distinct islands. An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.

Example 1:

11000
11000
00011
00011
Given the above grid map, return 1.

Example 2:

11011
10000
00001
11011
Given the above grid map, return 3.

Notice that:

11
1
and

 1
11
are considered different island shapes, because we do not consider reflection / rotation.

Note: The length of each dimension in the givengriddoes not exceed 50.

Thoughts:

Distinct islands: island 2d coordinates sets are distinct based off its offset


case =1
input =4 5
1 1 0 0 0
1 1 0 0 0
0 0 0 1 1
0 0 0 1 1
output =1

case =2
input =5 5
1 1 0 1 1
1 0 0 0 1
0 0 0 0 0
1 0 0 0 1
1 1 0 1 1
output =4

*/
import java.util.*;
public class Test {
    
    public int numDistinctIslands(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        Set<String> islands = new HashSet<>();
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    StringBuilder sb = new StringBuilder();
                    dfs(grid, visited, i, j, sb, "o"); // origin
                    islands.add(sb.toString());
                }
            }
        }
        
        return islands.size();
    }
    
    private void dfs(int[][] grid, boolean[][] visited, int i, int j, StringBuilder sb, String direction) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] || grid[i][j] == 0) {
            return;
        }
        
        visited[i][j] = true;
        sb.append(direction);
        dfs(grid, visited, i+1, j, sb, "d"); 
        dfs(grid, visited, i-1, j, sb, "u"); 
        dfs(grid, visited, i, j+1, sb, "r"); 
        dfs(grid, visited, i, j-1, sb, "l"); 
        sb.append("b"); 
    }
    public static void main(String[]args){
        Scanner sc=new Scanner(System.in);
        int x=sc.nextInt();
        int y=sc.nextInt();
        int grid[][]=new int[x][y];
        for(int i=0;i<x;i++){
            for(int j=0;j<y;j++){
                grid[i][j]=sc.nextInt();
            }
        }
        System.out.println(new Test().numDistinctIslands(grid));
    }
}

