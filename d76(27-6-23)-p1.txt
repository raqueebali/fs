
/*Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a 
different word or phrase, typically using all the original letters exactly once.


Example 1:
Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:
Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".




case=1
input=
cbaebabacd
abc
output=
0 6
case=2
input=
abab
ab
output=
0 1 2

*/

import java.util.*;

public class Test{
    public static List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList<>();
        Map<Character, Integer> targetMap = new HashMap<>();
        Map<Character, Integer> windowMap = new HashMap<>();

        
        for (char c : p.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }

        int left = 0, right = 0;
        int matchCount = 0;

        while (right < s.length()) {
            
            char rightChar = s.charAt(right);
            windowMap.put(rightChar, windowMap.getOrDefault(rightChar, 0) + 1);
            if (windowMap.getOrDefault(rightChar, 0) <= targetMap.getOrDefault(rightChar, 0)) {
                matchCount++;
            }

            
            if (right - left + 1 == p.length()) {
                
                if (matchCount == p.length()) {
                    result.add(left);
                }

                
                char leftChar = s.charAt(left);
                windowMap.put(leftChar, windowMap.get(leftChar) - 1);
                if (windowMap.getOrDefault(leftChar, 0) < targetMap.getOrDefault(leftChar, 0)) {
                    matchCount--;
                }
                left++;
            }

            right++;
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s =sc.next();
        String p =sc.next();
        List<Integer> indices = findAnagrams(s, p);
        System.out.println(indices); 
    }
}
